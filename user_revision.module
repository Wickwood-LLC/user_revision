<?php

/**
 * @file
 * User Revision module.
 */
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\Entity\User as UserEntity;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_entity_type_alter().
 */
function user_revision_entity_type_alter(array &$entity_types) {
  /* @var $user \Drupal\Core\Entity\ContentEntityType */
  $user = $entity_types['user'];
  $user->setStorageClass('Drupal\user_revision\UserStorage');
  $user->setHandlerClass('storage_schema', 'Drupal\user_revision\UserStorageSchema');
  $user->set('revision_table', 'users_revision');
  $user->set('revision_data_table', 'users_field_revision');
  $entity_keys = $user->getKeys();
  $entity_keys['revision'] = 'vid';
  $user->set('entity_keys', $entity_keys);
}

/**
 * Implements hook_entity_base_field_info() fore user entity.
 */
function user_revision_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user') {
    $fields = array();

    $fields['vid'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Revision ID'))
      ->setDescription(t('The user revision ID.'))
      ->setReadOnly(TRUE)
      ->setSetting('unsigned', TRUE);

    $fields['revision_timestamp'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Revision timestamp'))
      ->setDescription(t('The time that the current revision was created.'))
      ->setQueryable(FALSE)
      ->setRevisionable(TRUE);

    $fields['revision_uid'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Revision user ID'))
      ->setDescription(t('The user ID of the author of the current revision.'))
      ->setSetting('target_type', 'user')
      ->setQueryable(FALSE)
      ->setRevisionable(TRUE);

    $fields['revision_log'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Revision log message'))
      ->setDescription(t('Briefly describe the changes you have made.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', array(
      'type' => 'string_textarea',
      'weight' => 25,
      'settings' => array(
        'rows' => 4,
      ),
    ));

    return $fields;
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function user_revision_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user') {
    $fields['langcode']->setRevisionable(TRUE);
    $fields['name']->setRevisionable(TRUE);
    $fields['pass']->setRevisionable(TRUE);
    $fields['mail']->setRevisionable(TRUE);
    $fields['signature']->setRevisionable(TRUE);
    $fields['signature_format']->setRevisionable(TRUE);
    $fields['timezone']->setRevisionable(TRUE);
    $fields['status']->setRevisionable(TRUE);
    $fields['created']->setRevisionable(TRUE);
    $fields['changed']->setRevisionable(TRUE);
  }
}

/**
 * Implements hook_install().
 */
function user_revision_install() {
  \Drupal::entityManager()->getStorage('user')->install();
  // Fill revision tables
  foreach (UserEntity::loadMultiple() as $user) {
    if ($user->id() > 0) {
      $user->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function user_revision_uninstall() {
  \Drupal::entityManager()->getStorage('user')->uninstall();
}

/**
 * Implements hook_ENTITY_TYPE_presave() for user entity.
 */
function user_revision_user_presave(UserInterface $user) {
  if (!count($user->get('revision_uid')->getValue())) {
    $user->set('revision_uid', \Drupal::currentUser()->id());
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user_form.
 * 
 * @see user_revision_form_user_form_builder()
 */
function user_revision_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('user_revision.settings');
  /* @var $user \Drupal\user\Entity\User */
  $user = $form_state->getFormObject()->getEntity();

  // Add a revision_log field if the "Create new revision" option is checked,
  // or if the current user has the ability to check that option.
  $form['revision_information'] = array(
    '#type' => 'details',
    '#title' => t('Revision information'),
    // Open by default when "Create new revision" is checked.
    '#open' => $config->get('user_revision_default_enabled'),
    '#attributes' => array(
      'class' => array('user-form-revision-information'),
    ),
    '#weight' => 20,
    '#optional' => TRUE,
  );

  $form['revision'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new revision'),
    '#default_value' => $config->get('user_revision_default_enabled'),
    '#access' => \Drupal::currentUser()->hasPermission('administer users'),
    '#group' => 'revision_information',
  );

  $form['revision_log'] += array(
    '#states' => array(
      'visible' => array(
        ':input[name="revision"]' => array('checked' => TRUE),
      ),
    ),
    '#group' => 'revision_information'
  );

  if (!$form['revision']['#access'] && !$form['revision']['#default_value']) {
    unset($form['revision_log']);
  }

  // Define entity builder
  $form['#entity_builders'][] = 'user_revision_form_user_form_builder';
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function user_revision_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Remove revision log from register form for anonymous users
  if (\Drupal::currentUser()->isAnonymous()) {
    unset($form['revision_log']);
  }
}

/**
 * Entity form builder for user_form.
 * 
 * @see user_revision_form_user_form_alter()
 */
function user_revision_form_user_form_builder($entity_type, UserInterface $user, &$form, FormStateInterface $form_state) {
  // Save as a new revision if requested to do so.
  if (!$form_state->isValueEmpty('revision') && $form_state->getValue('revision') != FALSE) {
    $user->setNewRevision();
    // If a new revision is created, save the current user as revision author.
    $user->set('revision_timestamp', REQUEST_TIME);
    $user->set('revision_uid', \Drupal::currentUser()->id());
  }
  else {
    $user->setNewRevision(FALSE);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user_admin_settings.
 * 
 * @see user_revision_form_user_admin_settings_submit()
 */
function user_revision_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('user_revision.settings');

  $form['revision'] = array(
    '#type' => 'details',
    '#title' => t('Revision information'),
    '#open' => TRUE,
    '#weight' => 0
  );

  $form['revision']['revision_default_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new revision'),
    '#default_value' => $config->get('user_revision_default_enabled')
  );

  // Add submit handler to save revision configuration.
  $form['#submit'][] = 'user_revision_form_user_admin_settings_submit';
}

/**
 * Form submission handler for user_admin_settings().
 *
 * @see user_revision_form_user_admin_settings_alter()
 */
function user_revision_form_user_admin_settings_submit($form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('user_revision.settings');
  $config->set('user_revision_default_enabled', $form_state->getValue('revision_default_status'));
  $config->save();
}
