<?php

/**
 * @file
 * User Revision module.
 */
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\Entity\User as UserEntity;

/**
 * Implements hook_entity_type_alter().
 */
function user_revision_entity_type_alter(array &$entity_types) {
  /* @var $user \Drupal\Core\Entity\ContentEntityType */
  $user = $entity_types['user'];
  $user->setStorageClass('Drupal\user_revision\UserStorage');
  $user->setHandlerClass('storage_schema', 'Drupal\user_revision\UserStorageSchema');
  $user->set('revision_table', 'users_revision');
  $user->set('revision_data_table', 'users_field_revision');
  $entity_keys = $user->getKeys();
  $entity_keys['revision'] = 'vid';
  $user->set('entity_keys', $entity_keys);
}

/**
 * Implements hook_entity_base_field_info() fore user entity.
 */
function user_revision_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user') {
    $fields = array();

    $fields['vid'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Revision ID'))
      ->setDescription(t('The user revision ID.'))
      ->setReadOnly(TRUE)
      ->setSetting('unsigned', TRUE);

    $fields['revision_timestamp'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Revision timestamp'))
      ->setDescription(t('The time that the current revision was created.'))
      ->setQueryable(FALSE)
      ->setRevisionable(TRUE);

    $fields['revision_uid'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Revision user ID'))
      ->setDescription(t('The user ID of the author of the current revision.'))
      ->setSetting('target_type', 'user')
      ->setQueryable(FALSE)
      ->setRevisionable(TRUE);

    $fields['revision_log'] = BaseFieldDefinition::create('string_long')
      ->setLabel(t('Revision log message'))
      ->setDescription(t('Briefly describe the changes you have made.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', array(
      'type' => 'string_textarea',
      'weight' => 25,
      'settings' => array(
        'rows' => 4,
      ),
    ));

    return $fields;
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function user_revision_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user') {
    $fields['name']->setRevisionable(TRUE);
    $fields['pass']->setRevisionable(TRUE);
    $fields['mail']->setRevisionable(TRUE);
    $fields['signature']->setRevisionable(TRUE);
    $fields['signature_format']->setRevisionable(TRUE);
    $fields['timezone']->setRevisionable(TRUE);
    $fields['status']->setRevisionable(TRUE);
    $fields['created']->setRevisionable(TRUE);
    $fields['changed']->setRevisionable(TRUE);
  }
}

/**
 * Implements hook_install().
 */
function user_revision_install() {
  \Drupal::entityManager()->getStorage('user')->install();
  // Fill revision tables
  foreach (UserEntity::loadMultiple() as $user) {
    if ($user->id() > 0) {
      $user->save();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function user_revision_uninstall() {
  \Drupal::entityManager()->getStorage('user')->uninstall();
}
