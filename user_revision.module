<?php
// $Id: 

/**
 * @file
 * Enables user revision.
 */

/**
 * Implements hook_views_api().
 */
function user_revision_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'user_revision') . '/views', 
  );
}

/**
 * Implements hook_menu().
 */
function user_revision_menu() {
  $items['user/%user/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => 'user_revision_overview',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view user revisions'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'user_revision.pages.inc',
  );
  $items['user/%user/revisions/%/view'] = array(
    'title' => 'Revisions',
    'page callback' => 'user_revision_show',
    'page arguments' => array(1, 3),
    'access callback' => 'user_access',
    'access arguments' => array('view user revisions'),
  );
  $items['user/%user_revision/revisions/%/revert'] = array(
    'title' => 'Revert to earlier revision',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_revision_revert_confirm', 1),
    'access callback' => 'user_access',
    'access arguments' => array('revert user revisions'),
    'file' => 'user_revision.pages.inc',
  );
  $items['user/%user_revision/revisions/%/delete'] = array(
    'title' => 'Delete earlier revision',
    'load arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_revision_delete_confirm', 1),
    'access callback' => 'user_access',
    'access arguments' => array('delete user revisions'),
    'file' => 'user_revision.pages.inc',
  );
  $items['admin/config/people/revisions'] = array(
    'title' => 'Revision settings',
    'description' => 'Configure revision settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_revision_admin_settings'),
    'access arguments' => array('administer users'),
    'file' => 'user_revision.admin.inc',
    'weight' => 10,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function user_revision_permission() {
  return array(
    'view user revisions' =>  array(
      'title' => t('View revisions'),
      'restrict access' => TRUE,
    ),
    'revert user revisions' => array(
      'title' => t('Revert revisions'),
      'restrict access' => TRUE,
    ),
    'delete user revisions' => array(
      'title' => t('Delete revisions'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function user_revision_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'user/*/revisions' => TRUE,
      'user/*/revisions/*/revert' => TRUE,
      'user/*/revisions/*/delete' => TRUE,
    );
    return $paths;
  }
}

/**
 * Controller class for user_revision.
 *
 * This extends the UserController class, adding required
 * revision handling for user objects.
 */
class UserRevisionController extends UserController {
  function attachLoad(&$queried_users, $revision_id = FALSE) {
    parent::attachLoad($queried_users, $revision_id);
    foreach ($queried_users as $key => $record) {
      $queried_users[$key]->revision = 1;
    }
  }
  protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
    $query = parent::buildQuery($ids, $conditions, $revision_id);
    $fields =& $query->getFields();
    unset($fields['timestamp']);
    $query->addField('revision', 'timestamp', 'revision_timestamp');
    $query->addField('revision', 'authorid', 'revision_uid');
    $fields['uid']['table'] = 'base';
    return $query;
  }
}

/**
 * Implements hook_schema_alter().
 */
function user_revision_schema_alter(&$schema) {
  $schema['users']['fields']['vid'] = array(
    'description' => 'The current {user_revision}.vid version identifier.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  );
  $schema['users']['foreign keys']['user_revision'] = array(
    'table' => 'user_revision',
    'columns' => array('vid' => 'vid'),
  );
  $schema['users']['unique keys']['vid'] = array('vid');
}

/**
 * Implements hook_entity_info_alter().
 */
function user_revision_entity_info_alter(&$entity_info) {
  module_load_install ('user_revision');
  $entity_info['user']['revision table'] = 'user_revision';
  $entity_info['user']['entity keys']['revision'] = 'vid';
  $entity_info['user']['controller class'] = 'UserRevisionController';
  
  $schema = user_revision_schema();
  foreach ($schema['user_revision']['fields'] as $k => $field) {
    $entity_info['user']['schema_fields_sql']['revision table'][] = $k;
  }
}

/**
 * Implements hook_form_alter().
 */
function user_revision_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => NULL,
  );
  $form['revision'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
}

/**
 * Implements hook_form_alter().
 */
function user_revision_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $account = $form_state['user'];
  $account->revision = FALSE;

  $form['revision_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Revision information'),
    '#collapsible' => TRUE,
    '#collapsed' => !variable_get('user_revision_by_default', 0) && !$account->revision,
    '#attributes' => array(
      'class' => array('user-profile-form-revision-information'),
    ),
    '#weight' => 20,
    '#access' => variable_get('user_revision_by_default', 0) || $account->revision || user_access('view user revision'),
  );
  $form['revision_information']['revision'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new revision'),
    '#default_value' => $account->revision,
    '#access' => variable_get('user_revision_by_default', 0) || user_access('administer users'),
  );
  if (!$account->revision) {
    $form['revision_information']['revision']['#states'] = array(
      'checked' => array(
        'textarea[name="log"]' => array('empty' => FALSE),
      ),
    );
  }
  $form['revision_information']['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Revision log message'),
    '#rows' => 4,
    '#default_value' => !empty($account->log) ? $account->log : '',
    '#description' => t('Provide an explanation of the changes you are making. This will help other authors understand your motivations.'),
  );
  $form['#submit'][] = 'user_revision_user_profile_form_submit';

  $form['vid'] = array(
    '#type' => 'value', 
    '#value' => isset($account->vid) ? $account->vid : NULL,
  );
}

/**
 * Submit function for the user account and profile editing form.
 */
function user_revision_user_profile_form_submit($form, &$form_state) {
  $form_state['user']->revision = $form_state['values']['revision'];
  $form_state['user']->log = $form_state['values']['log'];
}

/**
 * Show a revision.
 */
function user_revision_show($user, $vid) {
  $account = user_revision_load($user->uid, $vid);
  drupal_set_title(t('Revision of %title from %date', array('%title' => $user->name, '%date' => format_date($account->revision_timestamp))), PASS_THROUGH);
  return user_view_page($account, 'full');
}

/**
 * Load a revision.
 */
function user_revision_load($uid, $vid) {
  return user_revision_user_load($uid, $vid);
}

/**
 * Implements hook_user_load().
 * Loads a user object with revision support
 */
function user_revision_user_load($uid, $vid = NULL, $reset = FALSE) {
  if (isset($vid)) {
    $conditions = (isset($vid) ? array('vid' => $vid) : array());
    $users = user_load_multiple(array($uid), $conditions, $reset);
    return reset($users);
  }
}

/**
 * Implements hook_user_presave().
 */
function user_revision_user_presave(&$edit, $account, $category) {
  $edit['log'] = empty($edit['log']) ? '' : $edit['log'];
  if (isset($edit['revision']) && $edit['revision'] == 1) {
    $edit['uid'] = $account->uid;
    $edit['old_vid'] = $edit['vid'];
    unset($edit['vid']);
    $edit['timestamp'] = REQUEST_TIME;
    global $user;
    $edit['authorid'] = $user->uid;
    _user_save_revision($edit);
  }
}

/**
 * Implements hook_user_insert().
 */
function user_revision_user_insert(&$edit, $account, $category) {
  $edit['uid'] = $account->uid;
  $edit['old_vid'] = $edit['vid'];
  unset($edit['vid']);
  $edit['timestamp'] = REQUEST_TIME;
  global $user;
  $edit['authorid'] = $user->uid;
  _user_save_revision($edit);
}

/**
 * Implements hook_user_delete().
 */
function user_revision_user_delete($account) {
  $revisions = db_query('SELECT vid FROM {user_revision} WHERE uid = :uid', array(':uid' => $account->uid))->fetchCol();
  foreach ($revisions as $revision) {
    user_revision_delete($revision);
  }
}

/**
 * Save record to the database.
 */
function _user_save_revision(&$edit, $update = NULL) {
  // add timestamp and author
  if (isset($update)) {
    $res = drupal_write_record('user_revision', $edit, $update);
  }
  else {
    $res = drupal_write_record('user_revision', $edit);
  }
  // pass new vid to user_save?
}

/**
 * Return a list of all the existing revision numbers.
 */
function user_revision_list($user) {
  $revisions = array();
  $result = db_query('SELECT r.vid, r.name, r.log, r.authorid, u.vid AS current_vid, r.timestamp, a.name FROM {user_revision} r LEFT JOIN {users} u ON u.vid = r.vid LEFT JOIN {users} a ON r.authorid = a.uid WHERE r.uid = :uid ORDER BY r.vid DESC', array(':uid' => $user->uid));
  foreach ($result as $revision) {
    $revisions[$revision->vid] = $revision;
  }
  return $revisions;
}

/**
 * Delete a user revision.
 *
 * @param $revision_id
 *   The revision ID to delete.
 */
function user_revision_delete($revision) {
  db_delete('user_revision')
    ->condition('uid', $revision->uid)
    ->condition('vid', $revision->vid)
    ->execute();
  module_invoke_all('user_revision_delete', $revision);
  field_attach_delete_revision('user', $revision);
  return TRUE;
}


